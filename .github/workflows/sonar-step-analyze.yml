name: Sonar analyze with artifacts

on:
  workflow_call:
    inputs:
      LABELS:
        required: true
        type: string
      WORKING_DIRECTORY:
        required: true
        type: string
      SONAR_IMAGE:
        required: false
        type: string
        default: "ghcr.io/zupit-it/pipeline-templates/flutter-sonar-scanner-cli:5.0.1"
      SONAR_HOST_URL:
        required: false
        type: string
        default: "https://sonarqube.zupit.software"
      DOWNLOAD_ARTIFACT:
        required: false
        type: boolean
        default: true
      ARTIFACT_FILENAME:
        required: false
        type: string
        default: ""
      ARTIFACT_PATH:
        required: false
        type: string
        default: ".coverage-reports/"
      PRE_SCAN_COMMANDS:
        required: false
        type: string
        default: ""

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  sonar-analyze:
    runs-on: ${{ fromJson(inputs.LABELS) }}
    container: ${{ inputs.SONAR_IMAGE }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ${{ inputs.WORKING_DIRECTORY }}
          args: >
            -Dsonar.qualitygate.wait=true
            
      - name: Find report-task.txt file in repository root
        run: |
          echo "Searching for report-task.txt in the repository root..."
          find . -name report-task.txt


      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        with:
          scanMetadataReportFile: ${{ inputs.WORKING_DIRECTORY }}/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
