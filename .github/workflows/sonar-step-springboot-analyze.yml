name: Sonar analyze with artifacts

on:
  workflow_call:
    inputs:
      RUN_ON:
        required: false
        type: string
        default: "zupit-agents"
      RUNNERS_CONTAINER_GROUP:
        required: false
        type: string
        default: "Container"
      WORKING_DIRECTORY:
        required: true
        type: string
      JAVA_IMAGE:
        required: true
        type: string
      CHECK_QUALITY_GATE:
        required: false
        type: boolean
        default: false
      DOWNLOAD_ARTIFACT:
        required: false
        type: boolean
        default: true
      ARTIFACT_FILENAME:
        required: false
        type: string
        default: ""
      ARTIFACT_PATH:
        required: false
        type: string
        default: ".coverage-reports/"
      PRE_SCAN_COMMANDS:
        required: false
        type: string
        default: ""
      MAVEN_USER_HOME:
        required: false
        type: string
        default: "./m2"
      EXTRA_MAVEN_ARGS:
        required: false
        type: string
        default: ""

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  sonar-analyze:
    runs-on:
      labels: ${{ inputs.RUN_ON }}
      group: ${{ inputs.RUNNERS_CONTAINER_GROUP }}
    container: ${{ inputs.JAVA_IMAGE }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifact
        if: ${{ inputs.DOWNLOAD_ARTIFACT }}
        uses: actions/download-artifact@v3
        with:
          name: ${{inputs.ARTIFACT_FILENAME}}
          path: ${{ inputs.WORKING_DIRECTORY }}/${{ inputs.ARTIFACT_PATH }}

      - name: Run PRE_SCAN_COMMANDS commands
        if: ${{ inputs.PRE_SCAN_COMMANDS != '' }}
        run: ${{ inputs.PRE_SCAN_COMMANDS }}

      - name: Run Sonar
        run: ./mvnw -ntp org.sonarsource.scanner.maven:sonar -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.qualitygate.wait=${{ inputs.CHECK_QUALITY_GATE }}
