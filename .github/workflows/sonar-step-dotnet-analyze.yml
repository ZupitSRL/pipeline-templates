name: Sonar analyze with artifacts

on:
  workflow_call:
    inputs:
      RUN_ON:
        required: false
        type: string
        default: 'zupit-agents'
      RUNNERS_CONTAINER_GROUP:
        required: false
        type: string
        default: 'Container'
      WORKING_DIRECTORY:
        required: true
        type: string
      SONAR_PROJECT_KEY:
        required: true
        type: string
      SONAR_IMAGE:
        required: false
        type: string
        default: "sonarsource/sonar-scanner-cli"
      SONAR_EXCLUSIONS:
        required: false
        type: string
        default: ""
      COVERAGE_EXCLUSIONS:
        required: false
        type: string
        default: ""
      DOTNET_VERSION:
        required: false
        type: string
        default: "7"
      SONAR_IMAGE_ENV_VARIABLES:
        required: false
        type: string
        default: "{}"
      COVERAGE_FILES:
        required: false
        type: string
        default: ""

jobs:
  sonar-analyze:
    runs-on:
      labels: ${{ inputs.RUN_ON }}
      group: ${{ inputs.RUNNERS_CONTAINER_GROUP }}
    container:
      image: ${{ inputs.SONAR_IMAGE }}
      env: ${{ fromJson(inputs.SONAR_IMAGE_ENV_VARIABLES) }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install .NET
        uses: zupit-it/pipeline-templates/.github/actions/dotnet/install@v1.21.4
        with:
          WORKING_DIRECTORY: ${{ inputs.WORKING_DIRECTORY }}
          DOTNET_VERSION: ${{ inputs.DOTNET_VERSION }}
          ALPINE_OS: true

      - name: Install SonarSource for .NET
        run: |
          dotnet tool update --tool-path /tmp/dotnet-tools dotnet-sonarscanner
          ln -s /tmp/dotnet-tools/dotnet-sonarscanner /usr/bin/dotnet-sonarscanner

      - name: Begin .NET SonarScanner
        shell: "bash"
        run: |
          params=()
          [[ -n "${{ inputs.SONAR_EXCLUSIONS }}" ]] && params+=(/d:sonar.exclusions="${{ inputs.SONAR_EXCLUSIONS }}")
          [[ -n "${{ inputs.COVERAGE_EXCLUSIONS }}" ]] && params+=(/d:sonar.coverage.exclusions="${{ inputs.COVERAGE_EXCLUSIONS }}")
          [[ -n "${{ inputs.COVERAGE_FILES }}" ]] && params+=(/d:sonar.cs.opencover.reportsPaths="${{ inputs.COVERAGE_FILES }}")
          [[ -z "${{ inputs.COVERAGE_FILES }}" ]] && params+=(/d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml)

          dotnet-sonarscanner begin \
            /k:"${{ inputs.SONAR_PROJECT_KEY }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            /d:sonar.cs.vstest.reportsPaths=**/*.trx \
            "${params[@]}"

      - name: Build
        uses: zupit-it/pipeline-templates/.github/actions/dotnet/build@v1.21.4
        with:
          WORKING_DIRECTORY: ${{ inputs.WORKING_DIRECTORY }}
          BUILD_CONFIG: "Debug"

      - name: Run tests
        uses: zupit-it/pipeline-templates/.github/actions/dotnet/test@v1.21.4
        with:
          WORKING_DIRECTORY: ${{ inputs.WORKING_DIRECTORY }}
          EXCLUDE_FILES: ${{ inputs.COVERAGE_EXCLUSIONS }}
